Passing Props to a Component
React components use props to communicate with each other. Every parent component can pass some information to its child 
components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them,
 including objects, arrays, and functions.


 React component functions accept a single argument, a props object:

Pitfall
Don’t miss the pair of { and } curlies inside of ( and ) when declaring props:

function Avatar({ person, size }) {
  // ...
}
This syntax is called “destructuring” and is equivalent to reading properties from a function parameter:

function Avatar(props) {}


Passing JSX as children 

When you nest content inside a JSX tag, the parent component will receive that content in a prop called children. 
You can think of a component with a children prop as having a “hole” that can be “filled in” by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, etc.
like,
function Card({ children , Nmae="Aloke" }) {
  return (<>
    <div style={{backgroundColor:"red", margin:"10px"}}>
      {children} {Nmae}
    </div>
  </>)
}

function Profile({ person, size, isSepia, thickBorder }) {
  return (
    <>
      <Card>
        <Avatar
          person={person}
          size={size}
          isSepia={isSepia}
          thickBorder={thickBorder} />
      </Card>
    </>
  )
}
This example illustrates that a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component’s data at any point in time, rather than only in the beginning.

However, props are immutable—a term from computer science meaning “unchangeable”. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to “ask” its parent component to pass it different props—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.

Don’t try to “change props”. When you need to respond to the user input (like changing the selected color), you will need to “set state”, which you can learn about in State: A Component’s Memory.

Recap

To pass props, add them to the JSX, just like you would with HTML attributes.
To read props, use the function Avatar({ person, size }) destructuring syntax.
You can specify a default value like size = 100, which is used for missing and undefined props.
You can forward all props with <Avatar {...props} /> JSX spread syntax, but don’t overuse it!
Nested JSX like <Card><Avatar /></Card> will appear as Card component’s children prop.
Props are read-only snapshots in time: every render receives a new version of props.
You can’t change props. When you need interactivity, you’ll need to set state.



