useFormState
Canary
The useFormState Hook is currently only available in React’s Canary and experimental channels. Learn more about release channels here. In addition, you need to use a framework that supports React Server Components to get the full benefit of useFormState.

useFormState is a Hook that allows you to update state based on the result of a form action.

const [state, formAction] = useFormState(fn, initialState);
Reference
useFormState(action, initialState)
Usage
Using information returned by a form action
Troubleshooting
My action can no longer read the submitted form data
Reference 
useFormState(action, initialState) 
Call useFormState at the top level of your component to create component state that is updated when a form action is invoked. You pass useFormState an existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state. The latest form state is also passed to the function that you provided.

import { useFormState } from "react-dom";

async function increment(previousState, formData) {
  return previousState + 1;
}

function StatefulForm({}) {
  const [state, formAction] = useFormState(increment, 0);
  return (
    <form>
      {state}
      <button formAction={formAction}>Increment</button>
    </form>
  )
}
The form state is the value returned by the action when the form was last submitted. If the form has not yet been submitted, it is the initial state that you pass.

If used with a Server Action, useFormState allows the server’s response from submitting the form to be shown even before hydration has completed.

See more examples below.

Parameters 
fn: The function to be called when the form is submitted or button pressed. When the function is called, it will receive the previous state of the form (initially the initialState that you pass, subsequently its previous return value) as its initial argument, followed by the arguments that a form action normally receives.
initialState: The value you want the state to be initially. It can be any serializable value. This argument is ignored after the action is first invoked.
Returns 
useFormState returns an array with exactly two values:

The current state. During the first render, it will match the initialState you have passed. After the action is invoked, it will match the value returned by the action.
A new action that you can pass as the action prop to your form component or formAction prop to any button component within the form.
Caveats 
When used with a framework that supports React Server Components, useFormState lets you make forms interactive before JavaScript has executed on the client. When used without Server Components, it is equivalent to component local state.
The function passed to useFormState receives an extra argument, the previous or initial state, as its first argument. This makes its signature different than if it were used directly as a form action without using useFormState.
Usage 
Using information returned by a form action 
Call useFormState at the top level of your component to access the return value of an action from the last time a form was submitted.

import { useFormState } from 'react-dom';
import { action } from './actions.js';

function MyComponent() {
  const [state, formAction] = useFormState(action, null);
  // ...
  return (
    <form action={formAction}>
      {/* ... */}
    </form>
  );
}
useFormState returns an array with exactly two items:

The current state of the form, which is initially set to the initial state you provided, and after the form is submitted is set to the return value of the action you provided.
A new action that you pass to <form> as its action prop.
When the form is submitted, the action function that you provided will be called. Its return value will become the new current state of the form.

The action that you provide will also receive a new first argument, namely the current state of the form. The first time the form is submitted, this will be the initial state you provided, while with subsequent submissions, it will be the return value from the last time the action was called. The rest of the arguments are the same as if useFormState had not been used

function action(currentState, formData) {
  // ...
  return 'next state';
}


