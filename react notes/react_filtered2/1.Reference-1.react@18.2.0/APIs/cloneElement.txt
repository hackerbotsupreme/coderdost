Using cloneElement is uncommon and can lead to fragile code. See common alternatives.

try to avoid it and use alternatives . 

Alternatives 
Passing data with a render prop 
Instead of using cloneElement, consider accepting a render prop like renderItem. Here, List receives renderItem as a prop. List calls renderItem for every item and passes isHighlighted as an argument:

...
...
..

The renderItem prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a renderItem implementation that renders a <Row> with the given isHighlighted value:

...
...
...
The end result is the same as with cloneElement:

...
...
..
However, you can clearly trace where the isHighlighted value is coming from.

....
...
..

This pattern is preferred to cloneElement because it is more explicit.

Passing data through context 
Another alternative to cloneElement is to pass data through context.

For example, you can call createContext to define a HighlightContext:

export const HighlightContext = createContext(false);
Your List component can wrap every item it renders into a HighlightContext provider. 

...
...
..

With this approach, Row does not need to receive an isHighlighted prop at all. Instead, it reads the context:

export default function Row({ title }) {
  const isHighlighted = useContext(HighlightContext);
  // ...
This allows the calling component to not know or worry about passing isHighlighted to <Row>:

<List
  items={products}
  renderItem={product =>
    <Row title={product.title} />
  }
/>
Instead, List and Row coordinate the highlighting logic through context.

....
...
...

Extracting logic into a custom Hook 
Another approach you can try is to extract the “non-visual” logic into your own Hook, and use the information returned by your Hook to decide what to render. For example, you could write a useList custom Hook like this:

...
...
...
Then you could use it like this:

..
...
...
The data flow is explicit, but the state is inside the useList custom Hook that you can use from any component:

...
...
...
This approach is particularly useful if you want to reuse this logic between different components.







