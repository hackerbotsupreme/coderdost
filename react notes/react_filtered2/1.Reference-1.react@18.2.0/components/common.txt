In the context of web development, ‚Äúcommon components‚Äù often refer to the standard HTML elements that are built into web browsers, such as <div>, <span>, <p>, and others. These elements, or components, are the building blocks of web pages and support common properties (props) and events.

However, in modern web development, the term ‚Äúcomponents‚Äù has a broader meaning. It can also refer to Web Components, a suite of different technologies allowing you to create reusable custom elements with their functionality encapsulated away from the rest of your code1.

what is shadow dom in react ? 

Shadow DOM is a web standard that helps you build components. It provides encapsulation by hiding DOM subtrees under shadow roots. This encapsulation allows a component to have its very own "shadow" DOM tree, which can't be accidentally accessed from the main document¬π¬≤.

Here are some key points about Shadow DOM¬π¬≤‚Åµ:
- **Encapsulation**: Shadow DOM enables you to attach a DOM tree to an element and have the internals of this tree hidden from JavaScript and CSS running in the page¬π. This means that code running in the page should not be able to accidentally break a custom element by modifying its internal implementation¬π.
- **Shadow Root**: Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree. This shadow DOM tree starts with a shadow root, underneath which you can attach any element, in the same way as the normal DOM¬π.
- **Style Scoping**: Shadow DOM provides a way to scope CSS styles to a specific DOM subtree and isolate that subtree from the rest of the document¬≥. This means that the styles defined in a shadow tree only apply to the elements within the shadow tree‚Åµ.
- **Usage**: Shadow DOM can be used in Custom Elements to hide component internals and apply component-local styles¬≤.

Here's an example of how you might use Shadow DOM¬π:

```javascript
const shadowEl = document.querySelector(".app-container");
const shadow = shadowEl.attachShadow({mode: 'open'});
```

In this example, a new Shadow DOM tree is being attached to the `.app-container` element. The `{mode: 'open'}` option means that the Shadow DOM can be accessed from JavaScript outside the shadow root¬π.

I hope this helps! If you have any more questions, feel free to ask. üòä


what are some real applications/usecases of shadow dom in react apps ? make a list

Sure, here are some real-world applications or use cases of Shadow DOM in React applications:

1. **Style Isolation**: Shadow DOM provides a way to scope CSS styles to a specific DOM subtree¬π¬≤. This means that the styles defined inside the Shadow DOM do not alter the page style outside and vice versa¬π¬≤. This can be particularly useful when you want to prevent styles from leaking into or out of a component¬π¬≤.

2. **Web Components**: React apps can be mounted inside Web Components¬≤. This allows you to create reusable custom elements with their functionality encapsulated away from the rest of your code¬π.

3. **Plugin Development**: If you're developing a plugin that overlays some UI on top of a page, Shadow DOM can be useful to prevent your UI from being affected by any page style¬π.

4. **Server Side Rendering (SSR)**: You can render a ReactJS application inside Shadow DOM with Server Side Rendering¬π. This can be particularly useful when you want to ensure the default styles of the form always work, no matter what theme your customers are using¬π.

5. **Style Encapsulation with Styled Components**: You can use styled-components for managing styles in the app¬π. This can be particularly useful when you want to ensure that the styles of your components are not affected by the global styles¬π.

Please note that while Shadow DOM can be beneficial in these scenarios, it's not something that should be used on a daily basis¬≤. It's a good option when you need to implement behavior mentioned in these use-cases¬≤.


Props -  special React props are supported for all built-in components
1.children-  A React node (an element, a string, a number, a portal, an empty node like null, undefined and booleans, or an array of other React nodes). Specifies the content inside the component. When you use JSX, you will usually specify the children prop implicitly by nesting tags like <div><span /></div>.

2.ref-  A ref object from useRef or createRef, or a ref callback function, or a string for legacy refs. Your ref will be filled with the DOM element for this node.

3.style-  An object with CSS styles, for example { fontWeight: 'bold', margin: 20 }. Similarly to the DOM style property, the CSS property names need to be written as camelCase, for example fontWeight instead of font-weight. You can pass strings or numbers as values. If you pass a number, like width: 100, React will automatically append px (‚Äúpixels‚Äù) to the value unless it‚Äôs a unitless property. We recommend using style only for dynamic styles where you don‚Äôt know the style values ahead of time. In other cases, applying plain CSS classes with className is more efficient. 


what is aria ? 
ARIA is a set of tools and guidelines that help make websites more accessible, especially for people with disabilities. It helps screen readers and other assistive technologies understand the content on a webpage better. This makes it easier for everyone to use the web.

These standard DOM props are also supported for all built-in components:(sync/deep relation between html and jsx)

1.accessKey
2.aria-*
3.autoCapitalize
4.className
5.contentEditable
6. data-*
7. dir
8. draggable
9.enterKeyHint
10.htmlFor
11.hidden
12.is
13. inputMode
14.itemProp
15. lang
16.onClick
17. onCopy
18. onCut
19. onDoubleClick
20.onDrag
21. ....
22. onKeyDown
23. onKeyUp 
24 ...
25. onMouseDown
26. onMouseDownCapture
27. onMouseEnter
28. onMouseLeave
29. ....
30 . onPointerMove
31. ... 

These events fire only for the <form> elements:

onReset: An Event handler function. Fires when a form gets reset.
onResetCapture: A version of onReset that fires in the capture phase.
onSubmit: An Event handler function. Fires when a form gets submitted.
onSubmitCapture: A version of onSubmit that fires in the capture phase.
....
....


These events fire only for the <dialog> elements. Unlike browser events, they bubble in React:

onCancel: An Event handler function. Fires when the user tries to dismiss the dialog.
onClose: An Event handler function. Fires when a dialog has been closed.
......
......

These events fire only for the <details> elements. Unlike browser events, they bubble in React:
onToggle: An Event handler function. Fires when the user toggles the details.
.......
.....

These events fire for <img>, <iframe>, <object>, <embed>, <link>, and SVG <image> elements. Unlike browser events, they bubble in React:
onLoad: An Event handler function. Fires when the resource has loaded.
onLoadCapture: A version of onLoad that fires in the capture phase.
onError: An Event handler function. Fires when the resource could not be loaded.
onErrorCapture: A version of onError that fires in the capture phase.

....
These events fire for resources like <audio> and <video>. Unlike browser events, they bubble in React:
.....
.....
onError: An Event handler function. Fires when the resource could not be loaded.
onErrorCapture: A version of onError that fires in the capture phase.
.....
....
onPlay: An Event handler function. Fires when the media is no longer paused.
onPause: An Event handler function. Fires when the media was paused.
onPlaying: An Event handler function. Fires when the media starts or restarts playing.
.....
.....

Caveats 
You cannot pass both children and dangerouslySetInnerHTML at the same time.
Some events (like onAbort and onLoad) don‚Äôt bubble in the browser, but bubble in React.
.......
......

ref callback function 

Instead of a ref object (like the one returned by useRef), you may pass a function to the ref attribute.

<div ref={(node) => console.log(node)} />

How to manage a list of refs using a ref callback 

In the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don‚Äôt know how many you will have. Something like this wouldn‚Äôt work:
<ul>
  {items.map((item) => {
    // Doesn't work!
    const ref = useRef(null);
    return <li ref={ref} />;
  })}
</ul>
This is because Hooks must only be called at the top-level of your component. You can‚Äôt call useRef in a loop, in a condition, or inside a map() call.

One possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like querySelectorAll to ‚Äúfind‚Äù the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.

Another solution is to pass a function to the ref attribute. This is called a ref callback. React will call your ref callback with the DOM node when it‚Äôs time to set the ref, and with null when it‚Äôs time to clear it. This lets you maintain your own array or a Map, and access any ref by its index or some kind of ID.

This example shows how you can use this approach to scroll to an arbitrary node in a long list:
import { useRef } from 'react';

export default function CatFriends() {
  const itemsRef = useRef(null);

  function scrollToId(itemId) {
    const map = getMap();
    const node = map.get(itemId);
    node.scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: 'center'
    });
  }

  function getMap() {
    if (!itemsRef.current) {
      // Initialize the Map on first usage.
      itemsRef.current = new Map();
    }
    return itemsRef.current;
  }

  return (
    <>
      <nav>
        <button onClick={() => scrollToId(0)}>
          Tom
        </button>
        <button onClick={() => scrollToId(5)}>
          Maru
        </button>
        <button onClick={() => scrollToId(9)}>
          Jellylorum
        </button>
      </nav>
      <div>
        <ul>
          {catList.map(cat => (
            <li
              key={cat.id}
              ref={(node) => {
                const map = getMap();
                if (node) {
                  map.set(cat.id, node);
                } else {
                  map.delete(cat.id);
                }
              }}
            >
              <img
                src={cat.imageUrl}
                alt={'Cat #' + cat.id}
              />
            </li>
          ))}
        </ul>
      </div>
    </>
  );
}

const catList = [];
for (let i = 0; i < 10; i++) {
  catList.push({
    id: i,
    imageUrl: 'https://placekitten.com/250/200?image=' + i
  });
}
In this example, itemsRef doesn‚Äôt hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. (Refs can hold any values!) The ref callback on every list item takes care to update the Map:
<li
  key={cat.id}
  ref={node => {
    const map = getMap();
    if (node) {
      // Add to the Map
      map.set(cat.id, node);
    } else {
      // Remove from the Map
      map.delete(cat.id);
    }
  }}
>
This lets you read individual DOM nodes from the Map later.


Parameters
node: A DOM node or null. React will pass you the DOM node when the ref gets attached, and null when the ref gets detached. Unless you pass the same function reference for the ref callback on every render, the callback will get temporarily detached and re-attached during every re-render of the component.
....
.....

React event object 
Your event handlers will receive a React event object. It is also sometimes known as a ‚Äúsynthetic event‚Äù.
<button onClick={e => {
  console.log(e); // React event object
}} />

It conforms to the same standard as the underlying DOM events, but fixes some browser inconsistencies.

Some React events do not map directly to the browser‚Äôs native events. For example in onMouseLeave, e.nativeEvent will point to a mouseout event. The specific mapping is not part of the public API and may change in the future. If you need the underlying browser event for some reason, read it from e.nativeEvent.
....
...

Properties 
React event objects implement some of the standard Event properties:
bubbles: A boolean. Returns whether the event bubbles through the DOM.
currentTarget: A DOM node. Returns the node to which the current handler is attached in the React tree.
eventPhase: A number. Returns which phase the event is currently in.
defaultPrevented: A boolean. Returns whether preventDefault was called.
target: A DOM node. Returns the node on which the event has occurred (which could be a distant child).
.....
....

Methods 
React event objects implement some of the standard Event methods:
preventDefault(): Prevents the default browser action for the event.
stopPropagation(): Stops the event propagation through the React tree.
Additionally, React event objects provide these methods:
isDefaultPrevented(): Returns a boolean value indicating whether preventDefault was called.
isPropagationStopped(): Returns a boolean value indicating whether stopPropagation was called.
.....
....
....
ClipboardEvent handler function 
An event handler type for the Clipboard API events.
<input
  onCopy={e => console.log('onCopy')}
  onCut={e => console.log('onCut')}
  onPaste={e => console.log('onPaste')}
/>
....
....
....
DragEvent handler function 
An event handler type for the HTML Drag and Drop API events.

<>
  <div
    draggable={true}
    onDragStart={e => console.log('onDragStart')}
    onDragEnd={e => console.log('onDragEnd')}
  >
    Drag source
  </div>

  <div
    onDragEnter={e => console.log('onDragEnter')}
    onDragLeave={e => console.log('onDragLeave')}
    onDragOver={e => { e.preventDefault(); console.log('onDragOver'); }}
    onDrop={e => console.log('onDrop')}
  >
    Drop target
  </div>
</>
....
....
....
the inherited MouseEvent properties:
altKey
button
buttons
ctrlKey
clientX
clientY
getModifierState(key)
metaKey
movementX
movementY
pageX
pageY
relatedTarget
screenX
screenY
shiftKey
It also includes the inherited UIEvent properties:

detail
view

....
....


KeyboardEvent handler function 
An event handler type for keyboard events.

<input
  onKeyDown={e => console.log('onKeyDown')}
  onKeyUp={e => console.log('onKeyUp')}
/>

....
...

MouseEvent handler function 
An event handler type for mouse events.

<div
  onClick={e => console.log('onClick')}
  onMouseEnter={e => console.log('onMouseEnter')}
  onMouseOver={e => console.log('onMouseOver')}
  onMouseDown={e => console.log('onMouseDown')}
  onMouseUp={e => console.log('onMouseUp')}
  onMouseLeave={e => console.log('onMouseLeave')}
/>
....
....
PointerEvent handler function 
An event handler type for pointer events.

<div
  onPointerEnter={e => console.log('onPointerEnter')}
  onPointerMove={e => console.log('onPointerMove')}
  onPointerDown={e => console.log('onPointerDown')}
  onPointerUp={e => console.log('onPointerUp')}
  onPointerLeave={e => console.log('onPointerLeave')}
/>
......
......
......

How to apply multiple CSS classes conditionally? 

To apply CSS classes conditionally, you need to produce the className string yourself using JavaScript.

For example, className={'row ' + (isSelected ? 'selected': '')} will produce either className="row" or className="row selected" depending on whether isSelected is true.

To make this more readable, you can use a tiny helper library like classnames:

import cn from 'classnames';

function Row({ isSelected }) {
  return (
    <div className={cn('row', isSelected && 'selected')}>
      ...
    </div>
  );
}
It is especially convenient if you have multiple conditional classes:

import cn from 'classnames';

function Row({ isSelected, size }) {
  return (
    <div className={cn('row', {
      selected: isSelected,
      large: size === 'large',
      small: size === 'small',
    })}>
      ...
    </div>
  );
}
.....
....

....

Manipulating a DOM node with a ref 
Sometimes, you‚Äôll need to get the browser DOM node associated with a tag in JSX. For example, if you want to focus an <input> when a button is clicked, you need to call focus() on the browser <input> DOM node.

To obtain the browser DOM node for a tag, declare a ref and pass it as the ref attribute to that tag:

import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);
  // ...
  return (
    <input ref={inputRef} />
    // ...
React will put the DOM node into inputRef.current after it‚Äôs been rendered to the screen.

import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}

Dangerously setting the inner HTML 
You can pass a raw HTML string to an element like so:

const markup = { __html: '<p>some raw html</p>' };
return <div dangerouslySetInnerHTML={markup} />;
This is dangerous. As with the underlying DOM innerHTML property, you must exercise extreme caution! Unless the markup is coming from a completely trusted source, it is trivial to introduce an XSS vulnerability this way.

For example, if you use a Markdown library that converts Markdown to HTML, you trust that its parser doesn‚Äôt contain bugs, and the user only sees their own input, you can display the resulting HTML like this:

....
....

To see why rendering arbitrary HTML is dangerous, replace the code above with this:

const post = {
  // Imagine this content is stored in the database.
  content: `<img src="" onerror='alert("you were hacked")'>`
};

export default function MarkdownPreview() {
  // üî¥ SECURITY HOLE: passing untrusted input to dangerouslySetInnerHTML
  const markup = { __html: post.content };
  return <div dangerouslySetInnerHTML={markup} />;
}
The code embedded in the HTML will run. A hacker could use this security hole to steal user information or to perform actions on their behalf. Only use dangerouslySetInnerHTML with trusted and sanitized data.

Handling mouse events 
This example shows some common mouse events and when they fire.


export default function MouseExample() {
  return (
    <div
      onMouseEnter={e => console.log('onMouseEnter (parent)')}
      onMouseLeave={e => console.log('onMouseLeave (parent)')}
    >
      <button
        onClick={e => console.log('onClick (first button)')}
        onMouseDown={e => console.log('onMouseDown (first button)')}
        onMouseEnter={e => console.log('onMouseEnter (first button)')}
        onMouseLeave={e => console.log('onMouseLeave (first button)')}
        onMouseOver={e => console.log('onMouseOver (first button)')}
        onMouseUp={e => console.log('onMouseUp (first button)')}
      >
        First button
      </button>
      <button
        onClick={e => console.log('onClick (second button)')}
        onMouseDown={e => console.log('onMouseDown (second button)')}
        onMouseEnter={e => console.log('onMouseEnter (second button)')}
        onMouseLeave={e => console.log('onMouseLeave (second button)')}
        onMouseOver={e => console.log('onMouseOver (second button)')}
        onMouseUp={e => console.log('onMouseUp (second button)')}
      >
        Second button
      </button>
    </div>
  );
}

Handling pointer events 
This example shows some common pointer events and when they fire.

export default function PointerExample() {
  return (
    <div
      onPointerEnter={e => console.log('onPointerEnter (parent)')}
      onPointerLeave={e => console.log('onPointerLeave (parent)')}
      style={{ padding: 20, backgroundColor: '#ddd' }}
    >
      <div
        onPointerDown={e => console.log('onPointerDown (first child)')}
        onPointerEnter={e => console.log('onPointerEnter (first child)')}
        onPointerLeave={e => console.log('onPointerLeave (first child)')}
        onPointerMove={e => console.log('onPointerMove (first child)')}
        onPointerUp={e => console.log('onPointerUp (first child)')}
        style={{ padding: 20, backgroundColor: 'lightyellow' }}
      >
        First child
      </div>
      <div
        onPointerDown={e => console.log('onPointerDown (second child)')}
        onPointerEnter={e => console.log('onPointerEnter (second child)')}
        onPointerLeave={e => console.log('onPointerLeave (second child)')}
        onPointerMove={e => console.log('onPointerMove (second child)')}
        onPointerUp={e => console.log('onPointerUp (second child)')}
        style={{ padding: 20, backgroundColor: 'lightblue' }}
      >
        Second child
      </div>
    </div>
  );
}


Handling focus events 
In React, focus events bubble. You can use the currentTarget and relatedTarget to differentiate if the focusing or blurring events originated from outside of the parent element. The example shows how to detect focusing a child, focusing the parent element, and how to detect focus entering or leaving the whole subtree.


App.js
export default function FocusExample() {
  return (
    <div
      tabIndex={1}
      onFocus={(e) => {
        if (e.currentTarget === e.target) {
          console.log('focused parent');
        } else {
          console.log('focused child', e.target.name);
        }
        if (!e.currentTarget.contains(e.relatedTarget)) {
          // Not triggered when swapping focus between children
          console.log('focus entered parent');
        }
      }}
      onBlur={(e) => {
        if (e.currentTarget === e.target) {
          console.log('unfocused parent');
        } else {
          console.log('unfocused child', e.target.name);
        }
        if (!e.currentTarget.contains(e.relatedTarget)) {
          // Not triggered when swapping focus between children
          console.log('focus left parent');
        }
      }}
    >
      <label>
        First name:
        <input name="firstName" />
      </label>
      <label>
        Last name:
        <input name="lastName" />
      </label>
    </div>
  );
}


Handling keyboard events 
This example shows some common keyboard events and when they fire.

export default function KeyboardExample() {
  return (
    <label>
      First name:
      <input
        name="firstName"
        onKeyDown={e => console.log('onKeyDown:', e.key, e.code)}
        onKeyUp={e => console.log('onKeyUp:', e.key, e.code)}
      />
    </label>
  );
}

