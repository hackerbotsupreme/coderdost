State is isolated between components.(preserved)
React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.


in react , State is tied to a position in the render tree 
React builds render trees for the component structure in your UI.

we think that , When you give a component state, you might think the state “lives” inside the component. but waht actually happens is , But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree.

and the reason behind that they are seperated is ,  each is rendered at its own position in the tree.In React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.



React will keep the state around for as long as you render the same component at the same position in the tree.

 the moment you stop rendering the second counter, its state disappears completely. That’s because when React removes a component, it destroys its state.

 its state are initialized from scratch (score = 0) and added to the DOM.

React preserves a component’s state for as long as it’s being rendered at its position in the UI tree. If it gets removed, or a different component gets rendered at the same position, React discards its state.


Same component at the same position preserves state
Updating the App state does not reset the Counter because Counter stays in the same position.It’s the same component at the same position, so from React’s perspective, it’s the same counter.

Pitfall
Remember that it’s the position in the UI tree—not in the JSX markup—that matters to React! This component has two return clauses with different <Counter /> JSX tags inside and outside the if.
You might expect the state to reset when you tick checkbox, but it doesn’t! This is because both of these <Counter /> tags are rendered at the same position. React doesn’t know where you place the conditions in your function. All it “sees” is the tree you return.

In both cases, the App component returns a <div> with <Counter /> as a first child. To React, these two counters have the same “address”: the first child of the first child of the root. This is how React matches them up between the previous and next renders, regardless of how you structure your logic.



Different components at the same position reset state 

Here, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter. But when you swapped in a p, React removed the Counter from the UI tree and destroyed its state.
When Counter changes to p, the Counter is deleted and the p is added
When switching back, the p is deleted and the Counter is added
Also, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox,The counter state gets reset when you click the checkbox. 
Although you render a Counter, the first child of the div changes from a div to a section. When the child div was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.(When section changes to div, the section is deleted and the new div is added,When switching back, the div is deleted and the new section is added
)

untill this time react was resetting the state , 


As a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to “match up” from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.


Pitfall
This is why you should not nest component function definitions.Every time you click the button, the input state disappears! This is because a different MyTextField function is created for every render of MyComponent. You’re rendering a different component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, always declare component functions at the top level, and don’t nest their definitions.





