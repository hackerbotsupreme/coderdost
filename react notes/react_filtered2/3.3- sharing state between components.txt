Sometimes, you want the state of two components to always change together(Sharing State Between Components). To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as lifting state up, and it’s one of the most common things you will do writing React code.


Lifting state up by example 

In this example, a parent Accordion component renders two separate Panels.Each Panel component has a boolean isActive state that determines whether its content is visible.Initially, each Panel’s isActive state is false, so they both appear collapsed.Clicking either Panel’s button will only update that Panel’s isActive state alone

But now let’s say you want to change it so that only one panel is expanded at any given time. With that design, expanding the second panel should collapse the first one
To coordinate these two panels, you need to “lift their state up” to a parent component. 

Step 1:You will give control of the Panel’s isActive to its parent component. This means that the parent component will pass isActive to Panel as a prop instead.Now the Panel’s parent component can control isActive by passing it down as a prop. Conversely, the Panel component now has no control over the value of isActive—it’s now up to the parent component!


Step 2: To lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate. Since it’s above both panels and can control their props, it will become the “source of truth” for which panel is currently active. 



Step 3:only one panel should be active at a time. This means that the Accordion common parent component needs to keep track of which panel is the active one.
Clicking the “Show” button in either Panel needs to change the active index in Accordion. A Panel can’t set the activeIndex state directly because it’s defined inside the Accordion. The Accordion component needs to explicitly allow the Panel component to change its state by passing an event handler down as a prop:


Initially, Accordion’s activeIndex is 0, so the first Panel receives isActive = true.When Accordion’s activeIndex state changes to 1, the second Panel receives isActive = true instead.


we lift up the state to establish coordination beteen components , but coordination is an  visualal effect 
that comes through controlling the ui insync whiich is only possible through sharing data and  that is exactly  where the concept originates of Controlled ,uncontrolled components . 


Controlled and uncontrolled components 

Yes, you're on the right track. In React, "lifting state up" is a common technique for multiple components to synchronize and share data with each other. This is often done by moving the shared state to their closest common ancestor.

Controlled and uncontrolled components are indeed related to this concept. A controlled component in React is one where React is in control of the state and its updates. This is typically done by binding component state to form elements and handling updates through events.

On the other hand, an uncontrolled component works like traditional HTML form inputs. They maintain their own internal state, and you query the DOM using a ref to find its current value when you need it. This means that in an uncontrolled component, the source of truth is the DOM and not the React component.

So, in essence, the concept of controlled and uncontrolled components in React does originate from the need to manage and coordinate UI state across components. However, it's also important to note that choosing between controlled and uncontrolled components depends on the specific requirements of your application. Some scenarios may benefit from the granular control offered by controlled components, while others may find the simplicity of uncontrolled components more suitable.



It is common to call a component with some local state “uncontrolled”. For example, the original Panel component with an isActive state variable is uncontrolled because its parent cannot influence whether the panel is active or not.

In contrast, you might say a component is “controlled” when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final Panel component with the isActive prop is controlled by the Accordion component.

Uncontrolled components are easier to use within their parents because they require less configuration. But they’re less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.


When writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later.



A single source of truth for each state 

In a React application, many components will have their own state. Some state may “live” close to the leaf components (components at the bottom of the tree) like inputs. Other state may “live” closer to the top of the app. 

For each unique piece of state, you will choose the component that “owns” it. This principle is also known as having a “single source of truth”. It doesn’t mean that all state lives in one place—but that for each piece of state, there is a specific component that holds that piece of information. Instead of duplicating shared state between components, lift it up to their common shared parent, and pass it down to the children that need it.

Your app will change as you work on it. It is common that you will move state down or back up while you’re still figuring out where each piece of the state “lives”. This is all part of the process!



Recap
When you want to coordinate two components, move their state to their common parent.
Then pass the information down through props from their common parent.
Finally, pass the event handlers down so that the children can change the parent’s state.
It’s useful to consider components as “controlled” (driven by props) or “uncontrolled” (driven by state).