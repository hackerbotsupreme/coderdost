Props vs State 

There are two types of “model” data in React: props and state. The two are very different:

Props are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button.
State is like a component’s memory. It lets a component keep track of some information and change it in response to interactions. For example, a Button might keep track of isHovered state.
Props and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and pass it down to child components as their props. 
It’s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!


Thinking in React
React can change how you think about the designs you look at and the apps you build. When you build a
 user interface with React, you will first break it apart into pieces called components. Then, you will 
 describe the different visual states for each of your components. 
Finally, you will connect your components together so that the data flows through them.

Step 1: Break the UI into a component hierarchy 

Step 2: Build a static version in React 
Now that you have your component hierarchy, it’s time to implement your app. The most straightforward approach 
is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often
 easier to build the static version first and add interactivity later. Building a static version requires a lot of 
 typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.

To build a static version of your app that renders your data model, you’ll want to build components that reuse 
other components and pass data using props. Props are a way of passing data from parent to child. 
(If you’re familiar with the concept of state, don’t use state at all to build this static version. 
State is reserved only for interactivity, that is, data that changes over time. Since this is a static
 version of the app, you don’t need it.)



You can either build “top down” by starting with building the components higher up in the hierarchy (like FilterableProductTable) or “bottom up” by working from components lower down (like ProductRow). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.


After building your components, you’ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy (FilterableProductTable) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.

Step 3: Find the minimal but complete representation of UI state 
To make the UI interactive, you need to let users change your underlying data model. You will use state for this.

Think of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it DRY (Don’t Repeat Yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.


Now think of all of the pieces of data in this example application:

The original list of products
The search text the user has entered
The value of the checkbox
The filtered list of products
Which of these are state? Identify the ones that are not:

Does it remain unchanged over time? If so, it isn’t state.
Is it passed in from a parent via props? If so, it isn’t state.
Can you compute it based on existing state or props in your component? If so, it definitely isn’t state!
What’s left is probably state.

Let’s go through them one by one again:

The original list of products is passed in as props, so it’s not state.
The search text seems to be state since it changes over time and can’t be computed from anything.
The value of the checkbox seems to be state since it changes over time and can’t be computed from anything.
The filtered list of products isn’t state because it can be computed by taking the original list of products and filtering it according to the search text and value of the checkbox.
This means only the search text and the value of the checkbox are state! Nicely done!



